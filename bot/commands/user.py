import json

from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from aiogram.methods.get_chat import GetChat

from pydantic import ValidationError

from bot.tools.Tool import UserTools
from bot.schames import schames

from bot.api import crud


router_user_command = Router()

@router_user_command.message(Command('start'))
async def start_message(message: Message):
    text = """
<b>–ü—Ä–∏–≤–µ—Ç!</b> üëã

–Ø ‚Äî –≤–∞—à –ø–æ–º–æ—à–Ω–∏–∫ –æ—Ç —Å–∞–π—Ç–∞ <s>pressf-drivingschool</s>
–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —ç—Ç–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º. 

–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥

<b>/help</b>

"""

    await message.answer(text)


@router_user_command.message(Command('help'))
async def cmd_help(message: Message, command: CommandObject):
    text="""
<b>/contact - —Å–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
/reg - –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
/groups - –¥–ª—è –ø–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø</b>
"""

    await message.answer(text)


@router_user_command.message(Command('contact'))
async def cmd_contact(message: Message):
    await message.answer("<a>https://t.me/Forgithe</a>")

@router_user_command.message(Command('groups'))
async def cmd_groups(message: Message):
    text = f"""
<b>–°–ø–∏—Å–æ–∫ –ì—Ä—É–ø–ø –ø–æ —Ç–µ–æ—Ä–∏–∏\n
[id] | [title] | [*]\n
* - –í—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ</b>\n
"""
# {[f" * <b>{i.id_grouplearn} | {i.title}</b>\n" for i in await crud.get_list_groupslearns()]}

    user_in_group_learn = await crud.get_groups_by_tg_id(
        message.from_user.id
    )

    for i in await crud.get_list_groupslearns():
        
        try:
            if i.id_grouplearn == user_in_group_learn.id_grouplearn:
                text += f"<b>{i.id_grouplearn} | {i.title} | [*]</b>\n"
                continue
        except AttributeError:
            ...

        text += f"<b>{i.id_grouplearn} | {i.title}</b>\n"

    await message.answer(text)


@router_user_command.message(Command('groupsjoin'))
async def cmd_groups_join(message: Message, command: CommandObject):
    try:
        id_group_learn:int = int(command.args.split()[0])

    except ValueError:
        await message.answer("/groupsjoin <b>[id groups learns] id must be int</b>")

    data={
            "tg_id_student":message.from_user.id,
            "id_grouplearn":id_group_learn
    }

    await crud.join_groups_learn(
        data=schames.DS_GroupsSchames.model_validate_json(json.dumps(data))
    )

    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É")


@router_user_command.message(Command('groupscreate'))
async def cmd_groups_create(message: Message, command: CommandObject):
    data = {
        "tg_id_user": message.from_user.id,
        "title": command.args
    }

    await crud.create_groups_learns(
        schames.DS_GroupLearnsSchames.model_validate_json(json.dumps(data))
    )

    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –≥—Ä—É–ø–ø—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º:\n<b>{data['title']}</b>")
